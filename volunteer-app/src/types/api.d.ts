/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/activities": {
    /** List activities */
    get: operations["activities-list"];
    /** Create activity */
    post: operations["activities-create"];
  };
  "/activities/{id}": {
    /** Get activity */
    get: operations["activities-get"];
    /** Delete activity */
    delete: operations["activities-delete"];
    /** Update activity */
    patch: operations["activities-update"];
  };
  "/admin/login": {
    /** Login */
    post: operations["login"];
  };
  "/auth/refresh": {
    /** Refresh token */
    post: operations["refresh-token"];
  };
  "/auth/request-code": {
    /** Request code */
    post: operations["request-code"];
  };
  "/auth/user": {
    /** Get user info */
    get: operations["user-info"];
    /** Update user profile */
    patch: operations["users-profile-update"];
  };
  "/auth/verify-code": {
    /** Verify code */
    post: operations["verify-code"];
  };
  "/categories": {
    /** List categories */
    get: operations["category-list"];
    /** Create category */
    post: operations["category-create"];
  };
  "/categories/{id}": {
    /** Get category */
    get: operations["category-get"];
    /** Update category */
    put: operations["category-update"];
    /** Delete category */
    delete: operations["category-delete"];
  };
  "/experiences": {
    /** List experiences */
    get: operations["experiences-list"];
    /** Create experience */
    post: operations["experiences-create"];
  };
  "/experiences/{id}": {
    /** Get experience */
    get: operations["experiences-get"];
    /** Update experience */
    put: operations["experiences-update"];
    /** Delete experience */
    delete: operations["experiences-delete"];
  };
  "/media": {
    /** Upload new Media */
    post: operations["media-upload"];
  };
  "/organizations": {
    /** List organizations */
    get: operations["organizations-list"];
    /** Create organization */
    post: operations["organizations-create"];
  };
  "/organizations/{id}": {
    /** Get organization */
    get: operations["organizations-get"];
    /** Delete organization */
    delete: operations["organizations-delete"];
    /** Update organization */
    patch: operations["organizations-update"];
  };
  "/organizations/{id}/favorite": {
    /** Add organization to favorites */
    post: operations["organizations-add-to-favorites"];
    /** Remove organization from favorites */
    delete: operations["organizations-remove-from-favorites"];
  };
  "/places": {
    /** List places */
    get: operations["places-list"];
  };
  "/user-devices": {
    /** List users devices */
    get: operations["user-devices-list"];
    /** Create user devices */
    post: operations["user-device-create"];
  };
  "/users": {
    /** List users */
    get: operations["users-list"];
    /** Create user */
    post: operations["user-create"];
  };
  "/users/:id": {
    /** Delete user */
    delete: operations["user-delete"];
    /** Update user */
    patch: operations["user-update"];
  };
  "/users/{id}": {
    /** Get user */
    get: operations["user-get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Activity: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      end_date: string;
      end_time: string;
      experience: components["schemas"]["Experience"];
      /** Format: int64 */
      id: number;
      message: string;
      /** Format: date-time */
      start_date: string;
      start_time: string;
      status: string;
      /** Format: date-time */
      updated_at: string;
      user: components["schemas"]["User"];
    };
    ActivityCreateData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      end_date: string;
      end_time: string;
      /** Format: int64 */
      experience_id: number;
      message: string;
      start_date: string;
      start_time: string;
    };
    ActivityListData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      page_info: components["schemas"]["PaginationInfo"];
      results: components["schemas"]["Activity"][] | null;
    };
    ActivityUpdateData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      end_date: string;
      end_time: string;
      message: string;
      start_date: string;
      start_time: string;
    };
    Category: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      code: string;
      /** Format: int64 */
      id: number;
      name: string;
    };
    CategoryCreateData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      code: string;
      name: string;
    };
    CategoryListData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      results: components["schemas"]["Category"][] | null;
    };
    CategoryUpdateData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      code: string;
      name: string;
    };
    DeletedAt: {
      /** Format: date-time */
      Time: string;
      Valid: boolean;
    };
    ErrorDetail: {
      /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
      location?: string;
      /** @description Error message text */
      message?: string;
      /** @description The value at the given location */
      value?: unknown;
    };
    ErrorModel: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      /** @description A human-readable explanation specific to this occurrence of the problem. */
      detail?: string;
      /** @description Optional list of individual error details */
      errors?: components["schemas"]["ErrorDetail"][] | null;
      /**
       * Format: uri
       * @description A URI reference that identifies the specific occurrence of the problem.
       */
      instance?: string;
      /**
       * Format: int64
       * @description HTTP status code
       */
      status?: number;
      /** @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
      title?: string;
      /**
       * Format: uri
       * @description A URI reference to human-readable documentation for the error.
       * @default about:blank
       */
      type?: string;
    };
    Experience: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      address: string;
      category: components["schemas"]["Category"];
      /** Format: int64 */
      category_id: number;
      city: string;
      contact_email: string;
      contact_name: string;
      contact_phone: string;
      country: string;
      /** Format: date-time */
      created_at: string;
      description: string;
      /** Format: date-time */
      end_date: string;
      end_time: string;
      friday: boolean;
      /** Format: int64 */
      id: number;
      image: string;
      is_recurring: boolean;
      /** Format: double */
      latitude: number;
      /** Format: double */
      longitude: number;
      monday: boolean;
      organization: components["schemas"]["Organization"];
      /** Format: int64 */
      organization_id: number;
      published: boolean;
      saturday: boolean;
      /** Format: date-time */
      start_date: string;
      start_time: string;
      state: string;
      sunday: boolean;
      thursday: boolean;
      title: string;
      tuesday: boolean;
      uid: string;
      /** Format: date-time */
      updated_at: string;
      wednesday: boolean;
      zip_code: string;
    };
    ExperienceCreateData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      address?: string;
      /** Format: int64 */
      category_id?: number;
      city?: string;
      contact_email?: string;
      contact_name?: string;
      contact_phone?: string;
      country?: string;
      description: string;
      end_date: string;
      end_time: string;
      image?: string;
      /** Format: double */
      latitude?: number;
      /** Format: double */
      longitude?: number;
      /** Format: int64 */
      organization_id?: number;
      published?: boolean;
      start_date: string;
      start_time: string;
      state?: string;
      title: string;
      zip_code?: string;
    };
    ExperienceListData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      page_info: components["schemas"]["PaginationInfo"];
      results: components["schemas"]["Experience"][] | null;
    };
    ExperienceUpdateData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      address?: string;
      /** Format: int64 */
      category_id?: number;
      city?: string;
      contact_email?: string;
      contact_name?: string;
      contact_phone?: string;
      country?: string;
      description: string;
      end_date: string;
      end_time: string;
      image?: string;
      /** Format: double */
      latitude?: number;
      /** Format: double */
      longitude?: number;
      /** Format: int64 */
      organization_id?: number;
      published?: boolean;
      start_date: string;
      start_time: string;
      state?: string;
      title: string;
      zip_code?: string;
    };
    ExtendedOrganization: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      DeletedAt: components["schemas"]["DeletedAt"];
      address: string;
      category: components["schemas"]["Category"];
      /** Format: int64 */
      category_id: number;
      city: string;
      country: string;
      /** Format: date-time */
      created_at: string;
      email: string;
      external_id: string;
      /** Format: int64 */
      id: number;
      is_favorite: boolean;
      /** Format: double */
      latitude: number;
      logo: string;
      /** Format: double */
      longitude: number;
      name: string;
      phone: string;
      published: boolean;
      state: string;
      tax_code: string;
      uid: string;
      /** Format: date-time */
      updated_at: string;
      vat_code: string;
      website: string;
      zip_code: string;
    };
    LoginData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      email: string;
      password: string;
    };
    MediaUploadResponseBody: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      Url: string;
    };
    Organization: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      DeletedAt: components["schemas"]["DeletedAt"];
      address: string;
      category: components["schemas"]["Category"];
      /** Format: int64 */
      category_id: number;
      city: string;
      country: string;
      /** Format: date-time */
      created_at: string;
      email: string;
      external_id: string;
      /** Format: int64 */
      id: number;
      /** Format: double */
      latitude: number;
      logo: string;
      /** Format: double */
      longitude: number;
      name: string;
      phone: string;
      published: boolean;
      state: string;
      tax_code: string;
      uid: string;
      /** Format: date-time */
      updated_at: string;
      vat_code: string;
      website: string;
      zip_code: string;
    };
    OrganizationCreateData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      name: string;
      phone: string;
    };
    OrganizationListData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      page_info: components["schemas"]["PaginationInfo"];
      results: components["schemas"]["ExtendedOrganization"][] | null;
    };
    OrganizationUpdateData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      email: string;
      external_id: string;
      name: string;
      phone: string;
    };
    PaginationInfo: {
      has_next_page: boolean;
      /** Format: int64 */
      page: number;
      /** Format: int64 */
      per_page: number;
      /** Format: int64 */
      total: number;
    };
    Place: {
      /** Format: int64 */
      id: number;
      /** Format: double */
      latitude: number;
      /** Format: double */
      longitude: number;
      name: string;
    };
    PlaceListData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      page_info: components["schemas"]["PaginationInfo"];
      results: components["schemas"]["Place"][] | null;
    };
    RefreshTokenData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      refresh_token: string;
    };
    RequestCodeData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      email: string;
    };
    TokenData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      access_token: string;
      refresh_token: string;
    };
    User: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      accepted_newsletter: boolean;
      accepted_tos: boolean;
      avatar: string;
      bio: string;
      city: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      date_of_birth: string;
      email: string;
      first_name: string;
      /** Format: int64 */
      id: number;
      is_email_verified: boolean;
      is_superuser: boolean;
      job: string;
      languages: string;
      last_name: string;
      /** Format: double */
      latitude: number;
      /** Format: double */
      longitude: number;
      notifications_activity_reminders: boolean;
      notifications_followed_organizations: boolean;
      notifications_nearby_activities: boolean;
      phone: string;
      tax_code: string;
      uid: string;
      /** Format: date-time */
      updated_at: string;
    };
    UserCreateData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      email: string;
      first_name: string;
      is_superuser: boolean;
      last_name: string;
      password: string;
      phone: string;
    };
    UserDevice: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      brand: string;
      /** Format: date-time */
      created_at: string;
      device_name: string;
      device_type: string;
      /** Format: int64 */
      id: number;
      model: string;
      os_name: string;
      token: string;
      uid: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: int64 */
      user_id: number;
    };
    UserDeviceCreateData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      brand: string;
      device_name: string;
      device_type: string;
      model: string;
      os_name: string;
      token: string;
    };
    UserDeviceListData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      page_info: components["schemas"]["PaginationInfo"];
      results: components["schemas"]["UserDevice"][] | null;
    };
    UserListData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      page_info: components["schemas"]["PaginationInfo"];
      results: components["schemas"]["User"][] | null;
    };
    UserProfileUpdateData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      accepted_newsletter?: boolean;
      accepted_tos?: boolean;
      avatar?: string;
      bio?: string;
      city?: string;
      date_of_birth?: string;
      email?: string;
      first_name?: string;
      job?: string;
      languages?: string;
      last_name?: string;
      /** Format: double */
      latitude?: number;
      /** Format: double */
      longitude?: number;
      notifications_activity_reminders?: boolean;
      notifications_followed_organizations?: boolean;
      notifications_nearby_activities?: boolean;
      phone?: string;
      tax_code?: string;
    };
    UserUpdateData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      email: string;
      first_name: string;
      is_superuser: boolean;
      last_name: string;
      password: string;
      phone: string;
    };
    VerifyCodeData: {
      /**
       * Format: uri
       * @description A URL to the JSON Schema for this object.
       */
      $schema?: string;
      code: string;
      email: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** List activities */
  "activities-list": {
    parameters: {
      query?: {
        page?: number;
        per_page?: number;
        q?: string;
        status?: string;
        end_date_from?: string;
        end_date_to?: string;
        start_date_from?: string;
        start_date_to?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityListData"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create activity */
  "activities-create": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivityCreateData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Activity"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get activity */
  "activities-get": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Activity"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete activity */
  "activities-delete": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update activity */
  "activities-update": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivityUpdateData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Activity"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Login */
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TokenData"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Refresh token */
  "refresh-token": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshTokenData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TokenData"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Request code */
  "request-code": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestCodeData"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get user info */
  "user-info": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update user profile */
  "users-profile-update": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserProfileUpdateData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Verify code */
  "verify-code": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyCodeData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TokenData"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List categories */
  "category-list": {
    parameters: {
      query?: {
        q?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryListData"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create category */
  "category-create": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryCreateData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get category */
  "category-get": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update category */
  "category-update": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryUpdateData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete category */
  "category-delete": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List experiences */
  "experiences-list": {
    parameters: {
      query?: {
        page?: number;
        per_page?: number;
        q?: string;
        lat?: number;
        lng?: number;
        date_start?: string;
        date_end?: string;
        categories?: number[] | null;
        organization?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ExperienceListData"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create experience */
  "experiences-create": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExperienceCreateData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Experience"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get experience */
  "experiences-get": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Experience"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update experience */
  "experiences-update": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExperienceUpdateData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Experience"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete experience */
  "experiences-delete": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Upload new Media */
  "media-upload": {
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description filename of the file being uploaded
           */
          filename?: string;
          /** @description general purpose name for multipart form value */
          name?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MediaUploadResponseBody"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List organizations */
  "organizations-list": {
    parameters: {
      query?: {
        page?: number;
        per_page?: number;
        q?: string;
        favorite?: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationListData"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create organization */
  "organizations-create": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationCreateData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get organization */
  "organizations-get": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedOrganization"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete organization */
  "organizations-delete": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update organization */
  "organizations-update": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationUpdateData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Add organization to favorites */
  "organizations-add-to-favorites": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Remove organization from favorites */
  "organizations-remove-from-favorites": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List places */
  "places-list": {
    parameters: {
      query?: {
        page?: number;
        per_page?: number;
        q?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlaceListData"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List users devices */
  "user-devices-list": {
    parameters: {
      query?: {
        page?: number;
        per_page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserDeviceListData"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create user devices */
  "user-device-create": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserDeviceCreateData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserDevice"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** List users */
  "users-list": {
    parameters: {
      query?: {
        page?: number;
        per_page?: number;
        q?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserListData"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Create user */
  "user-create": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreateData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Delete user */
  "user-delete": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Update user */
  "user-update": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateData"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
  /** Get user */
  "user-get": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["ErrorModel"];
        };
      };
    };
  };
}
